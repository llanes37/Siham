/******************************************************************************************
 * üìö UD6 - PROYECTO COMPLETO DE COLECCIONES: JUEGO DE AVENTURAS CON MAPAS
 * ----------------------------------------------------------------------------------------
 * üåü OBJETIVO: Aprender a usar colecciones en Java para representar ubicaciones
 * y recorridos en un juego interactivo mediante `Map`, `HashMap` y clases personalizadas.
 *
 * ‚úÖ LO QUE APRENDER√ÅS:
 * - Usar la estructura de datos `Map<K,V>` para representar relaciones clave-valor.
 * - Crear clases con atributos tipo `Map` (como `exits`).
 * - Utilizar bucles e interacci√≥n con el usuario para moverse entre ubicaciones.
 * - Validar entradas del usuario.
 * - Aplicar buenas pr√°cticas de POO con getters y encapsulaci√≥n.
 * - Reutilizar c√≥digo con m√©todos como `addExit()`.
 ******************************************************************************************/

 import java.util.HashMap;
 import java.util.Map;
 import java.util.Scanner;
 
 // =========================================================================================
 // üö™ CLASE UBICACION: Representa un lugar dentro del juego con salidas posibles
 // =========================================================================================
 class Ubicacion {
     private int id;                        // ‚úÖ Identificador num√©rico de la ubicaci√≥n
     private String descripcion;            // ‚úÖ Texto descriptivo del lugar
     private Map<String, Integer> exits;    // ‚úÖ Salidas disponibles: direccion -> id de ubicaci√≥n
 
     // ‚ú® Constructor que inicializa la ubicaci√≥n
     public Ubicacion(int id, String descripcion) {
         this.id = id;
         this.descripcion = descripcion;
         this.exits = new HashMap<>();  // ‚úÖ Creamos el mapa de salidas vac√≠o
     }
 
     // ‚úÖ Getters
     public int getId() {
         return id;
     }
 
     public String getDescripcion() {
         return descripcion;
     }
 
     public Map<String, Integer> getExits() {
         return exits;
     }
 
     // ‚ûï Agrega una salida a otra ubicaci√≥n
     public void addExit(String direccion, int idUbicacion) {
         exits.put(direccion.toUpperCase(), idUbicacion);  // ‚úÖ Convertimos en may√∫scula para facilitar validaci√≥n
     }
 }
 
 // =========================================================================================
 // üåç CLASE PRINCIPAL: L√≥gica del juego y recorrido entre ubicaciones
 // =========================================================================================
 public class UT6_map
 {
 
     // ‚úÖ Mapa que almacena todas las ubicaciones posibles del juego
     private static Map<Integer, Ubicacion> ubicaciones = new HashMap<>();
 
     public static void main(String[] args) {
         Scanner sc = new Scanner(System.in);
 
         // üåü Inicializamos las ubicaciones
         inicializarUbicaciones();
 
         int ubicacionActual = 1;  // ‚úÖ Empezamos en la cima de la monta√±a
 
         while (true) {
             Ubicacion actual = ubicaciones.get(ubicacionActual);
             System.out.println("\nüó∫ " + actual.getDescripcion());
 
             // ‚úâ Mostramos las salidas posibles desde la ubicaci√≥n actual
             System.out.print("üîé Salidas v√°lidas: ");
             for (String direccion : actual.getExits().keySet()) {
                 System.out.print(direccion + " ");
             }
             System.out.println();
 
             System.out.print("üî¢ Direcci√≥n > ");
             String direccion = sc.nextLine().trim().toUpperCase();
 
             // üåç Salida del juego si elige Q (quit)
             if (direccion.equals("Q")) {
                 System.out.println("\nüö™ Has salido del juego. Gracias por jugar!");
                 break;
             }
 
             // ‚ùå Validamos si la direcci√≥n es v√°lida en esta ubicaci√≥n
             if (actual.getExits().containsKey(direccion)) {
                 ubicacionActual = actual.getExits().get(direccion);  // ‚úÖ Cambiamos de ubicaci√≥n
             } else {
                 System.out.println("‚ùå No puedes ir en esa direcci√≥n.");
             }
         }
         sc.close();
     }
 
     // ‚öñÔ∏è Inicializa las ubicaciones y salidas
     public static void inicializarUbicaciones() {
         // üìç Creamos ubicaciones con su descripci√≥n
         ubicaciones.put(0, new Ubicacion(0, "Est√°s sentado en la clase de programaci√≥n"));
         ubicaciones.put(1, new Ubicacion(1, "Est√°s en la cima de una monta√±a"));
         ubicaciones.put(2, new Ubicacion(2, "Est√°s ba√±√°ndote en la playa"));
         ubicaciones.put(3, new Ubicacion(3, "Est√°s dentro de un edificio muy alto"));
         ubicaciones.put(4, new Ubicacion(4, "Est√°s de pie en un puente"));
         ubicaciones.put(5, new Ubicacion(5, "Est√°s en un bosque"));
 
         // ‚áÑ Agregamos salidas para cada ubicaci√≥n (menos la 0, que es final)
         ubicaciones.get(1).addExit("N", 5); // Monta√±a -> Bosque
         ubicaciones.get(1).addExit("E", 2); // Monta√±a -> Playa
         ubicaciones.get(1).addExit("S", 4); // Monta√±a -> Puente
         ubicaciones.get(1).addExit("O", 3); // Monta√±a -> Edificio
 
         ubicaciones.get(2).addExit("O", 1);
         ubicaciones.get(2).addExit("Q", 0);
 
         ubicaciones.get(3).addExit("E", 1);
         ubicaciones.get(3).addExit("Q", 0);
 
         ubicaciones.get(4).addExit("N", 1);
         ubicaciones.get(4).addExit("O", 5);
         ubicaciones.get(4).addExit("Q", 0);
 
         ubicaciones.get(5).addExit("S", 1);
         ubicaciones.get(5).addExit("E", 4);
         ubicaciones.get(5).addExit("Q", 0);
 
         // ‚úâ Mejora: Agregamos salida Q (quit) a todas las ubicaciones usando bucle
         for (Ubicacion u : ubicaciones.values()) {
             u.addExit("Q", 0);
         }
     }
 }
 