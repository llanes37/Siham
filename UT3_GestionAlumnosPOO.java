import java.util.ArrayList;
import java.util.Scanner;
// ==================================================================
// 1. CLASE ABSTRACTA BASE - Alumno
// ==================================================================
abstract class Alumno {
    private String nombre;
    private int edad;
    private String curso;

    public Alumno(String nombre, int edad, String curso) {
        this.nombre = nombre;
        this.edad = edad;
        this.curso = curso;
    }

    public String getNombre() { return nombre; }
    public int getEdad() { return edad; }
    public String getCurso() { return curso; }

    public void setNombre(String nombre) { this.nombre = nombre; }
    public void setEdad(int edad) { this.edad = edad; }
    public void setCurso(String curso) { this.curso = curso; }

    public abstract void mostrarInformacion();

    @Override
    public String toString() {
        return "üë§ " + nombre + " | Edad: " + edad + " | Curso: " + curso;
    }
}

// ==================================================================
// 2. CLASES HIJAS
// ==================================================================

class AlumnoPresencial extends Alumno {
    private String aula;

    public AlumnoPresencial(String nombre, int edad, String curso, String aula) {
        super(nombre, edad, curso);
        this.aula = aula;
    }

    public String getAula() { return aula; }
    public void setAula(String aula) { this.aula = aula; }

    @Override
    public void mostrarInformacion() {
        System.out.println(toString() + " | Tipo: Presencial | Aula: " + aula);
    }
}

class AlumnoOnline extends Alumno {
    private String plataforma;

    public AlumnoOnline(String nombre, int edad, String curso, String plataforma) {
        super(nombre, edad, curso);
        this.plataforma = plataforma;
    }

    public String getPlataforma() { return plataforma; }
    public void setPlataforma(String plataforma) { this.plataforma = plataforma; }

    @Override
    public void mostrarInformacion() {
        System.out.println(toString() + " | Tipo: Online | Plataforma: " + plataforma);
    }
}

class AlumnoErasmus extends Alumno {
    private String paisOrigen;

    public AlumnoErasmus(String nombre, int edad, String curso, String paisOrigen) {
        super(nombre, edad, curso);
        this.paisOrigen = paisOrigen;
    }

    public String getPaisOrigen() { return paisOrigen; }
    public void setPaisOrigen(String paisOrigen) { this.paisOrigen = paisOrigen; }

    @Override
    public void mostrarInformacion() {
        System.out.println(toString() + " | Tipo: Erasmus | Pa√≠s: " + paisOrigen);
    }
}

// ==================================================================
// 3. CLASE ClaseGrupo
// ==================================================================
class ClaseGrupo {
    private ArrayList<Alumno> listaAlumnos = new ArrayList<>();
// üëâ A√±ade directamente un alumno presencial desde datos b√°sicos
public void agregarAlumno(String nombre, int edad, String curso, String aula) {
    Alumno nuevo = new AlumnoPresencial(nombre, edad, curso, aula);
    listaAlumnos.add(nuevo);
    System.out.println("‚úÖ Alumno agregado (por nombre): " + nombre);
}
    public void agregarAlumno(Alumno alumno) {
        listaAlumnos.add(alumno);
        System.out.println("‚úÖ Alumno agregado: " + alumno.getNombre() + "edad " + alumno.getEdad());
    }

    public void mostrarAlumnos() {
        if (listaAlumnos.isEmpty()) {
            System.out.println("üì≠ No hay alumnos en el grupo.");
        } else {
            System.out.println("üìã Lista de alumnos:");
            for (Alumno a : listaAlumnos) {
                a.mostrarInformacion();
            }
        }
    }
public void borrarAlumno(String nombre) {
    listaAlumnos.removeIf(a -> a.getNombre().equalsIgnoreCase(nombre));
    System.out.println("üóëÔ∏è Se ha intentado borrar el alumno con nombre: " + nombre);
}
public void borrarAlumnoObjeto(Alumno alumno) {
    listaAlumnos.remove(alumno);
   
    }
public void buscarAlumnoPorObjeto(Alumno alumno) {
    if (listaAlumnos.contains(alumno)) {
        System.out.println("üîç Alumno encontrado por objeto:");
        alumno.mostrarInformacion();
    } else {
        System.out.println("‚ùå Ese alumno no est√° en el grupo.");
    }
}
    public void buscarAlumnoPorNombre(String nombre) {
        boolean encontrado = false;
        for (Alumno a : listaAlumnos) {
            if (a.getNombre().equalsIgnoreCase(nombre)) {
                System.out.println("üîç Alumno encontrado:");
                a.mostrarInformacion();
                encontrado = true;
                break;
            }
        }
        if (!encontrado) {
            System.out.println("‚ùå No se encontr√≥ el alumno con nombre: " + nombre);
        }
    }
}
// üß† M√âTODO: mostrarSoloErasmus()
// Muestra √∫nicamente los alumnos que son de tipo AlumnoErasmus usando instanceof
// public void mostrarSoloErasmus() { ... }

// üß† M√âTODO: mostrarPorCurso(String curso)
// Muestra los alumnos que est√©n matriculados en un curso concreto
// public void mostrarPorCurso(String curso) { ... }

// üß† M√âTODO: contarAlumnosPorTipo()
// Cuenta cu√°ntos alumnos hay de cada tipo: presencial, online, erasmus
// public void contarAlumnosPorTipo() { ... }

// üß† M√âTODO: ordenarPorNombre()
// Ordena la lista de alumnos alfab√©ticamente por nombre
// public void ordenarPorNombre() { ... }

// üß† M√âTODO: existeAlumno(String nombre)
// Devuelve true o false si existe un alumno con ese nombre
// public boolean existeAlumno(String nombre) { ... }

// ==================================================================
// 4. CLASE MAIN
// ==================================================================
public class UT3_GestionAlumnosPOO {
    public static void main(String[] args) {
        ClaseGrupo grupo = new ClaseGrupo();
        Scanner sc = new Scanner(System.in);

        // ‚úÖ Datos de prueba (puedes comentarlos si no los quieres fijos)
        Alumno carlos = new AlumnoPresencial("Carlos Ruiz", 20, "Programaci√≥n", "Aula 101");
        Alumno lucia = new AlumnoOnline("Luc√≠a Mart√≠nez", 22, "Dise√±o Web", "Zoom");
        Alumno franz = new AlumnoErasmus("Franz M√ºller", 21, "Redes", "Alemania");

        int opcion;
        boolean datosCargados = false;

        do {
            System.out.println("""
            ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
            ‚ïë         MEN√ö - GESTI√ìN ALUMNOS       ‚ïë
            ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
            ‚ïë 1. Agregar alumnos de prueba         ‚ïë
            ‚ïë 2. Borrar alumno (por objeto)        ‚ïë
            ‚ïë 3. Borrar alumno (por nombre)        ‚ïë
            ‚ïë 4. Mostrar todos los alumnos         ‚ïë
            ‚ïë 0. Salir                             ‚ïë
            ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            """);
/* ‚ïë 5. Buscar alumno por nombre          ‚ïë
‚ïë 6. Mostrar solo alumnos Erasmus      ‚ïë
‚ïë 7. Mostrar alumnos por curso         ‚ïë
‚ïë 8. Contar alumnos por tipo           ‚ïë
‚ïë 9. Ordenar alumnos por nombre        ‚ïë */
            System.out.print("Elige opci√≥n: ");
            opcion = sc.nextInt();
            sc.nextLine(); // limpiar buffer

            switch (opcion) {
                case 1 -> {
                    if (!datosCargados) {
                        grupo.agregarAlumno(carlos);
                        grupo.agregarAlumno(lucia);
                        grupo.agregarAlumno(franz);
                        datosCargados = true;
                        System.out.println("‚úÖ Alumnos de prueba a√±adidos.");
                    } else {
                        System.out.println("‚ö†Ô∏è Los alumnos de prueba ya fueron a√±adidos.");
                    }
                }

                case 2 -> {
                    grupo.borrarAlumnoObjeto(franz);  // solo de ejemplo
                }
                case 3 -> {
                    System.out.print("Introduce el nombre del alumno a borrar: ");
                    String nombre = sc.nextLine();
                    grupo.borrarAlumno(nombre);
                }
                case 4 -> {
                    grupo.mostrarAlumnos();
                }
                 case 5 -> {
                    grupo.buscarAlumnoPorNombre("Luc√≠a Mart√≠nez");
                }
                 case 6 -> {
                    grupo.mostrarAlumnos();
                }
                case 0 -> System.out.println("üëã Saliendo...");
                default -> System.out.println("‚ùå Opci√≥n no v√°lida");
            }

        } while (opcion != 0);

        sc.close();
    }
}