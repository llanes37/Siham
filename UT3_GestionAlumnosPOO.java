/**
 * üìö Examen Pr√°ctico - 2¬™ Evaluaci√≥n 2024/2025
 * üéØ OBJETIVO: Desarrollar un sistema de gesti√≥n de alumnos en una clase
 * üß† NIVEL: Programaci√≥n Orientada a Objetos (POO) - Herencia, Polimorfismo, Encapsulaci√≥n
 * üõ†Ô∏è HERRAMIENTA: IntelliJ IDEA (puedes usar Generate ‚åòN para getters, setters y constructores)
 *
 * ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 * üìù ENUNCIADO GENERAL:
 * Se desea crear una aplicaci√≥n que permita gestionar alumnos de distintos tipos dentro de una clase.
 * Todos los alumnos tienen nombre, edad y curso. Seg√∫n el tipo de alumno, se a√±adir√° informaci√≥n extra.
 *
 * ‚ûï CLASE BASE (abstracta): Alumno
 *     - Atributos: nombre (String), edad (int), curso (String)
 *     - Constructor, getters y setters
 *     - M√©todo abstracto mostrarInformacion()
 *     - M√©todo toString()
 *
 * ‚ûï CLASES HIJAS:
 *     - AlumnoPresencial ‚Üí atributo: aula (String)
 *     - AlumnoOnline ‚Üí atributo: plataforma (String)
 *     - AlumnoErasmus ‚Üí atributo: paisOrigen (String)
 *
 * ‚ûï CLASE ClaseGrupo:
 *     - Lista de alumnos
 *     - M√©todos: agregarAlumno(), mostrarAlumnos(), buscarAlumnoPorNombre()
 *
 * ‚úÖ CLASE MAIN: pruebas manuales sin men√∫.
 *
 * ‚úî Se valorar√° el uso correcto de POO, buenas pr√°cticas, comentarios y limpieza del c√≥digo.
 */

import java.util.ArrayList;

// ==================================================================
// 1. CLASE ABSTRACTA BASE - Alumno
// ------------------------------------------------------------------
// @blue Esta clase ser√° la base para todos los tipos de alumnos
// @green Encapsula atributos comunes: nombre, edad y curso
// @red ¬°RELLENA T√ö ESTE C√ìDIGO! Usa ‚åòN (Mac) o Alt + Insert (Win) para ayudarte
// ==================================================================
abstract class Alumno {
    // @cyan Atributos comunes: nombre, edad, curso
    // private String nombre;
    // ...

    // @green Constructor
    // public Alumno(...) { ... }

    // @yellow Getters y Setters
    // ...

    // @blue M√©todo abstracto mostrarInformacion()
    // public abstract void mostrarInformacion();

    // @purple M√©todo toString() que muestre info b√°sica
    // public String toString() { ... }
}

// ==================================================================
// 2. CLASES HIJAS - AlumnoPresencial, AlumnoOnline, AlumnoErasmus
// ------------------------------------------------------------------
// @blue Cada clase hereda de Alumno y a√±ade un campo espec√≠fico
// @green Implementan mostrarInformacion()
// ==================================================================

class AlumnoPresencial extends Alumno {
    // @cyan Atributo espec√≠fico: aula
    // ...

    // @green Constructor que llame al super()
    // ...

    // @blue Implementaci√≥n de mostrarInformacion()
    // ...
}

class AlumnoOnline extends Alumno {
    // @cyan Atributo espec√≠fico: plataforma
    // ...

    // @green Constructor que llame al super()
    // ...

    // @blue Implementaci√≥n de mostrarInformacion()
    // ...
}

class AlumnoErasmus extends Alumno {
    // @cyan Atributo espec√≠fico: paisOrigen
    // ...

    // @green Constructor que llame al super()
    // ...

    // @blue Implementaci√≥n de mostrarInformacion()
    // ...
}

// ==================================================================
// 3. CLASE ClaseGrupo - gesti√≥n del grupo de alumnos
// ------------------------------------------------------------------
// @blue Contiene una lista de alumnos
// @green M√©todos: agregarAlumno(), mostrarAlumnos(), buscarAlumnoPorNombre()
// ==================================================================

class ClaseGrupo {
    // @cyan Atributo: lista de alumnos
    // private ArrayList<Alumno> listaAlumnos = new ArrayList<>();

    // @green M√©todo agregarAlumno()
    // public void agregarAlumno(Alumno a) { ... }

    // @yellow M√©todo mostrarAlumnos()
    // public void mostrarAlumnos() { ... }

    // @purple M√©todo buscarAlumnoPorNombre(String nombre)
    // public void buscarAlumnoPorNombre(String nombre) { ... }
}

// ==================================================================
// 4. CLASE MAIN - pruebas manuales
// ------------------------------------------------------------------
// @blue Aqu√≠ puedes crear alumnos, agregarlos al grupo y mostrarlos
// @red No hace falta men√∫, solo pruebas directas
// ==================================================================

public class UT3_GestionAlumnosPOO {
    public static void main(String[] args) {
        // @green Crear una instancia de ClaseGrupo
        // ClaseGrupo grupo = new ClaseGrupo();

        // @yellow Crear varios alumnos y agregarlos
        // Alumno a1 = new AlumnoPresencial(...);
        // grupo.agregarAlumno(a1);

        // @purple Mostrar todos los alumnos
        // grupo.mostrarAlumnos();

        // @blue Buscar alumno por nombre
        // grupo.buscarAlumnoPorNombre("Mar√≠a");
    }
}

/***********************************************
 * ! EJERCICIOS OPCIONALES PARA PRACTICAR üöÄ *
 ***********************************************
 * 1Ô∏è‚É£ A√±ade una clase "AlumnoBecado" que tenga el atributo "tipoBeca"
 * 2Ô∏è‚É£ Permite ordenar los alumnos por nombre alfab√©ticamente
 * 3Ô∏è‚É£ A√±ade un m√©todo que muestre solo los alumnos de un tipo espec√≠fico (por ejemplo, solo Erasmus)
 * 4Ô∏è‚É£ Guarda en archivo.txt la lista completa de alumnos
 * 5Ô∏è‚É£ Crea una clase Profesor con nombre y asignatura, y relaci√≥nala con ClaseGrupo
 ***********************************************/
